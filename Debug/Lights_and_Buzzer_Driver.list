
Lights_and_Buzzer_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002378  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002470  08002470  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002470  08002470  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002470  08002470  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002484  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002484  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b02  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013e4  00000000  00000000  00027b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00028f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052b  00000000  00000000  00029618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d18  00000000  00000000  00029b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c6f  00000000  00000000  0004285b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009047a  00000000  00000000  0004b4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016c8  00000000  00000000  000db944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000dd00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002420 	.word	0x08002420

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002420 	.word	0x08002420

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	; 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	33c0      	adds	r3, #192	; 0xc0
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	589b      	ldr	r3, [r3, r2]
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	2203      	movs	r2, #3
 800024e:	400a      	ands	r2, r1
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	21ff      	movs	r1, #255	; 0xff
 8000254:	4091      	lsls	r1, r2
 8000256:	000a      	movs	r2, r1
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	019b      	lsls	r3, r3, #6
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	401a      	ands	r2, r3
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0018      	movs	r0, r3
 800026c:	2303      	movs	r3, #3
 800026e:	4003      	ands	r3, r0
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000274:	481f      	ldr	r0, [pc, #124]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b25b      	sxtb	r3, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	; 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	0019      	movs	r1, r3
 8000290:	230f      	movs	r3, #15
 8000292:	400b      	ands	r3, r1
 8000294:	3b08      	subs	r3, #8
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	3306      	adds	r3, #6
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1dfa      	adds	r2, r7, #7
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2203      	movs	r2, #3
 80002aa:	400a      	ands	r2, r1
 80002ac:	00d2      	lsls	r2, r2, #3
 80002ae:	21ff      	movs	r1, #255	; 0xff
 80002b0:	4091      	lsls	r1, r2
 80002b2:	000a      	movs	r2, r1
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	22ff      	movs	r2, #255	; 0xff
 80002c0:	401a      	ands	r2, r3
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2303      	movs	r3, #3
 80002ca:	4003      	ands	r3, r0
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	001c      	movs	r4, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	4023      	ands	r3, r4
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18c3      	adds	r3, r0, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b003      	add	sp, #12
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000302:	f000 fbed 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000306:	f000 f85f 	bl	80003c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Init(Clock_Frequency);
 800030a:	23fa      	movs	r3, #250	; 0xfa
 800030c:	019b      	lsls	r3, r3, #6
 800030e:	0018      	movs	r0, r3
 8000310:	f000 f948 	bl	80005a4 <SysTick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000314:	f000 f8e0 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000318:	f000 f8ae 	bl	8000478 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ConfigureOutputPins();
 800031c:	f000 fa34 	bl	8000788 <ConfigureOutputPins>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (killSwitchFlagRE){
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <main+0xc8>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d020      	beq.n	800036a <main+0x6e>
		  uint16_t pin = 0;
 8000328:	1dbb      	adds	r3, r7, #6
 800032a:	2200      	movs	r2, #0
 800032c:	801a      	strh	r2, [r3, #0]
		  pin  = debounceSwitch(KillSwitch_PIN);
 800032e:	2390      	movs	r3, #144	; 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	b29b      	uxth	r3, r3
 8000336:	2201      	movs	r2, #1
 8000338:	4013      	ands	r3, r2
 800033a:	b29b      	uxth	r3, r3
 800033c:	1dbc      	adds	r4, r7, #6
 800033e:	0018      	movs	r0, r3
 8000340:	f000 f8fa 	bl	8000538 <debounceSwitch>
 8000344:	0003      	movs	r3, r0
 8000346:	8023      	strh	r3, [r4, #0]
		  if (pin!=0){
 8000348:	1dbb      	adds	r3, r7, #6
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0e7      	beq.n	8000320 <main+0x24>
			  //Turn of all Relays
			  FrontLightRelayCTRL(OFF);
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f983 	bl	800065c <FrontLightRelayCTRL>
			  BackLightRelayCTRL(OFF);
 8000356:	2000      	movs	r0, #0
 8000358:	f000 f99a 	bl	8000690 <BackLightRelayCTRL>
			  DickeyLightRelayCTRL(OFF);
 800035c:	2000      	movs	r0, #0
 800035e:	f000 f9b1 	bl	80006c4 <DickeyLightRelayCTRL>
			  BuzzerCTRL(OFF);
 8000362:	2000      	movs	r0, #0
 8000364:	f000 f9c8 	bl	80006f8 <BuzzerCTRL>
			  while(1){
 8000368:	e7fe      	b.n	8000368 <main+0x6c>
				//Halt Operation
			  }
		  }
	  }else{

		  if(Check_Motor_Drive_Signal()){
 800036a:	f000 fae3 	bl	8000934 <Check_Motor_Drive_Signal>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <main+0x7a>
			  BuzzerDriver();
 8000372:	f000 f9db 	bl	800072c <BuzzerDriver>
		  }

		  if(Check_Cab_On_Door_Signal()){
 8000376:	f000 faed 	bl	8000954 <Check_Cab_On_Door_Signal>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d0d0      	beq.n	8000320 <main+0x24>

			  if (Check_Front_Door_Switches()){
 800037e:	f000 fa3f 	bl	8000800 <Check_Front_Door_Switches>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d003      	beq.n	800038e <main+0x92>
				  FrontLightRelayCTRL(ON);
 8000386:	2001      	movs	r0, #1
 8000388:	f000 f968 	bl	800065c <FrontLightRelayCTRL>
 800038c:	e002      	b.n	8000394 <main+0x98>
			  }else{
				  FrontLightRelayCTRL(OFF);
 800038e:	2000      	movs	r0, #0
 8000390:	f000 f964 	bl	800065c <FrontLightRelayCTRL>
			  }

			  if (Check_Rear_Door_Switches()){
 8000394:	f000 fa6d 	bl	8000872 <Check_Rear_Door_Switches>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d003      	beq.n	80003a4 <main+0xa8>
				  BackLightRelayCTRL(ON);
 800039c:	2001      	movs	r0, #1
 800039e:	f000 f977 	bl	8000690 <BackLightRelayCTRL>
 80003a2:	e002      	b.n	80003aa <main+0xae>
			  }else{
				  BackLightRelayCTRL(OFF);
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 f973 	bl	8000690 <BackLightRelayCTRL>
			  }

			  if(Check_Dickey_Door_Switch()){
 80003aa:	f000 fa9f 	bl	80008ec <Check_Dickey_Door_Switch>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d003      	beq.n	80003ba <main+0xbe>
				  DickeyLightRelayCTRL(ON);
 80003b2:	2001      	movs	r0, #1
 80003b4:	f000 f986 	bl	80006c4 <DickeyLightRelayCTRL>
 80003b8:	e7b2      	b.n	8000320 <main+0x24>
			  }else{
				  DickeyLightRelayCTRL(OFF);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 f982 	bl	80006c4 <DickeyLightRelayCTRL>
	  if (killSwitchFlagRE){
 80003c0:	e7ae      	b.n	8000320 <main+0x24>
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	200000b0 	.word	0x200000b0

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b590      	push	{r4, r7, lr}
 80003ca:	b099      	sub	sp, #100	; 0x64
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	242c      	movs	r4, #44	; 0x2c
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	0018      	movs	r0, r3
 80003d4:	2334      	movs	r3, #52	; 0x34
 80003d6:	001a      	movs	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	f001 fff5 	bl	80023c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003de:	231c      	movs	r3, #28
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	0018      	movs	r0, r3
 80003e4:	2310      	movs	r3, #16
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f001 ffed 	bl	80023c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ee:	003b      	movs	r3, r7
 80003f0:	0018      	movs	r0, r3
 80003f2:	231c      	movs	r3, #28
 80003f4:	001a      	movs	r2, r3
 80003f6:	2100      	movs	r1, #0
 80003f8:	f001 ffe6 	bl	80023c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fc:	0021      	movs	r1, r4
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2202      	movs	r2, #2
 8000402:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2201      	movs	r2, #1
 8000408:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2210      	movs	r2, #16
 800040e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000416:	187b      	adds	r3, r7, r1
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fddf 	bl	8000fdc <HAL_RCC_OscConfig>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000422:	f000 faa7 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	211c      	movs	r1, #28
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2207      	movs	r2, #7
 800042c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2100      	movs	r1, #0
 8000444:	0018      	movs	r0, r3
 8000446:	f001 f94f 	bl	80016e8 <HAL_RCC_ClockConfig>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800044e:	f000 fa91 	bl	8000974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000452:	003b      	movs	r3, r7
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000458:	003b      	movs	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	f001 faad 	bl	80019c0 <HAL_RCCEx_PeriphCLKConfig>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800046a:	f000 fa83 	bl	8000974 <Error_Handler>
  }
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b019      	add	sp, #100	; 0x64
 8000474:	bd90      	pop	{r4, r7, pc}
	...

08000478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800047e:	4a15      	ldr	r2, [pc, #84]	; (80004d4 <MX_USART2_UART_Init+0x5c>)
 8000480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000484:	2296      	movs	r2, #150	; 0x96
 8000486:	0192      	lsls	r2, r2, #6
 8000488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fb7d 	bl	8001bbc <HAL_UART_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004c6:	f000 fa55 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000028 	.word	0x20000028
 80004d4:	40004400 	.word	0x40004400

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_GPIO_Init+0x2c>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_GPIO_Init+0x2c>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0289      	lsls	r1, r1, #10
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <MX_GPIO_Init+0x2c>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	029b      	lsls	r3, r3, #10
 80004f4:	4013      	ands	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	40021000 	.word	0x40021000

08000508 <EXTI0_1_IRQHandler>:
		  OneSec.currentTime = counter;
		  OneSec.activeFlag = 1;
	  }
}

void EXTI0_1_IRQHandler(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    // Check if the interrupt was triggered by PA0
    if ((EXTI->PR & EXTI_PR_PR0) == EXTI_PR_PR0) {
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <EXTI0_1_IRQHandler+0x28>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	2201      	movs	r2, #1
 8000512:	4013      	ands	r3, r2
 8000514:	2b01      	cmp	r3, #1
 8000516:	d102      	bne.n	800051e <EXTI0_1_IRQHandler+0x16>
        killSwitchFlagRE = 1;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <EXTI0_1_IRQHandler+0x2c>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
    }

    // Clear the EXTI0 pending flag
    EXTI->PR |= EXTI_PR_PR0;
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <EXTI0_1_IRQHandler+0x28>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b03      	ldr	r3, [pc, #12]	; (8000530 <EXTI0_1_IRQHandler+0x28>)
 8000524:	2101      	movs	r1, #1
 8000526:	430a      	orrs	r2, r1
 8000528:	615a      	str	r2, [r3, #20]
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010400 	.word	0x40010400
 8000534:	200000b0 	.word	0x200000b0

08000538 <debounceSwitch>:

uint16_t debounceSwitch(uint16_t pin){
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	0002      	movs	r2, r0
 8000540:	1dbb      	adds	r3, r7, #6
 8000542:	801a      	strh	r2, [r3, #0]
	uint16_t currPin = 0;
 8000544:	250e      	movs	r5, #14
 8000546:	197b      	adds	r3, r7, r5
 8000548:	2200      	movs	r2, #0
 800054a:	801a      	strh	r2, [r3, #0]
	uint16_t temp = 0;
 800054c:	240c      	movs	r4, #12
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2200      	movs	r2, #0
 8000552:	801a      	strh	r2, [r3, #0]
	temp = pin;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	1dba      	adds	r2, r7, #6
 8000558:	8812      	ldrh	r2, [r2, #0]
 800055a:	801a      	strh	r2, [r3, #0]
	DelayMSW(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f000 f84d 	bl	80005fc <DelayMSW>
	if (pin==temp){
 8000562:	1dba      	adds	r2, r7, #6
 8000564:	193b      	adds	r3, r7, r4
 8000566:	8812      	ldrh	r2, [r2, #0]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	429a      	cmp	r2, r3
 800056c:	d10e      	bne.n	800058c <debounceSwitch+0x54>

		DelayMSW(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 f844 	bl	80005fc <DelayMSW>
		if (pin==temp){
 8000574:	1dba      	adds	r2, r7, #6
 8000576:	0021      	movs	r1, r4
 8000578:	187b      	adds	r3, r7, r1
 800057a:	8812      	ldrh	r2, [r2, #0]
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d109      	bne.n	8000596 <debounceSwitch+0x5e>
		  	currPin = temp;
 8000582:	197b      	adds	r3, r7, r5
 8000584:	187a      	adds	r2, r7, r1
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	801a      	strh	r2, [r3, #0]
 800058a:	e004      	b.n	8000596 <debounceSwitch+0x5e>
		}
	}else{
		currPin = pin;
 800058c:	230e      	movs	r3, #14
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	1dba      	adds	r2, r7, #6
 8000592:	8812      	ldrh	r2, [r2, #0]
 8000594:	801a      	strh	r2, [r3, #0]
	}
	return currPin;
 8000596:	230e      	movs	r3, #14
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	881b      	ldrh	r3, [r3, #0]
}
 800059c:	0018      	movs	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	b004      	add	sp, #16
 80005a2:	bdb0      	pop	{r4, r5, r7, pc}

080005a4 <SysTick_Init>:
		timeExpiredFlag = 0;
	}
	return timeExpiredFlag;
}

void SysTick_Init(uint32_t ticks){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

	SysTick->CTRL = 0; // Disable SysTick
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <SysTick_Init+0x54>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks-1; // Set Reload Register
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <SysTick_Init+0x54>)
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	3a01      	subs	r2, #1
 80005b8:	605a      	str	r2, [r3, #4]

	// Setting Interrupt Priority to the highest
	NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);
 80005ba:	2301      	movs	r3, #1
 80005bc:	425b      	negs	r3, r3
 80005be:	2103      	movs	r1, #3
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff fe2d 	bl	8000220 <__NVIC_SetPriority>

	SysTick->VAL = 0; // Reset the SysTick counter value
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <SysTick_Init+0x54>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // Selecting internal clock source
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SysTick_Init+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <SysTick_Init+0x54>)
 80005d2:	2104      	movs	r1, #4
 80005d4:	430a      	orrs	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; // Enabling SysTick exception Request when 0
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <SysTick_Init+0x54>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <SysTick_Init+0x54>)
 80005de:	2102      	movs	r1, #2
 80005e0:	430a      	orrs	r2, r1
 80005e2:	601a      	str	r2, [r3, #0]


	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SysTick_Init+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <SysTick_Init+0x54>)
 80005ea:	2101      	movs	r1, #1
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b002      	add	sp, #8
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	e000e010 	.word	0xe000e010

080005fc <DelayMSW>:

void DelayMSW(unsigned int time){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	for(int i=0; i<=time; i++){
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e009      	b.n	800061e <DelayMSW+0x22>
		while ((SysTick->CTRL & 0x00010000) == 0){
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <DelayMSW+0x34>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	025b      	lsls	r3, r3, #9
 8000614:	4013      	ands	r3, r2
 8000616:	d0f9      	beq.n	800060c <DelayMSW+0x10>
	for(int i=0; i<=time; i++){
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	d2f1      	bcs.n	800060a <DelayMSW+0xe>
				//Wait for 1 millisec.
		}
	}
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b004      	add	sp, #16
 800062e:	bd80      	pop	{r7, pc}
 8000630:	e000e010 	.word	0xe000e010

08000634 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

	if (counter == 0xffffffff) {
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <SysTick_Handler+0x24>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	d103      	bne.n	8000648 <SysTick_Handler+0x14>
        counter = 0; // Reset the counter if the maximum value is reached
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <SysTick_Handler+0x24>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
    } else {
        counter++; // Increment the counter
    }
}
 8000646:	e004      	b.n	8000652 <SysTick_Handler+0x1e>
        counter++; // Increment the counter
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <SysTick_Handler+0x24>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	4b02      	ldr	r3, [pc, #8]	; (8000658 <SysTick_Handler+0x24>)
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000b4 	.word	0x200000b4

0800065c <FrontLightRelayCTRL>:

void FrontLightRelayCTRL(int state){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	if (state){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <FrontLightRelayCTRL+0x1c>
		GPIO_PORT_CABINLEDS->ODR |= GPIO_PIN_CAB_LIGHT_FRNT_CTRL; // Front CabinLight is ON
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <FrontLightRelayCTRL+0x30>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <FrontLightRelayCTRL+0x30>)
 8000670:	2108      	movs	r1, #8
 8000672:	430a      	orrs	r2, r1
 8000674:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_FRNT_CTRL); // Front CabinLight is OFF
	}
}
 8000676:	e005      	b.n	8000684 <FrontLightRelayCTRL+0x28>
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_FRNT_CTRL); // Front CabinLight is OFF
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <FrontLightRelayCTRL+0x30>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <FrontLightRelayCTRL+0x30>)
 800067e:	2108      	movs	r1, #8
 8000680:	438a      	bics	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b002      	add	sp, #8
 800068a:	bd80      	pop	{r7, pc}
 800068c:	48000400 	.word	0x48000400

08000690 <BackLightRelayCTRL>:

void BackLightRelayCTRL(int state){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	if (state){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <BackLightRelayCTRL+0x1c>
		GPIO_PORT_CABINLEDS->ODR |= GPIO_PIN_CAB_LIGHT_REAR_CTRL;  // Back CabinLight is ON
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <BackLightRelayCTRL+0x30>)
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <BackLightRelayCTRL+0x30>)
 80006a4:	2110      	movs	r1, #16
 80006a6:	430a      	orrs	r2, r1
 80006a8:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_REAR_CTRL); // Back CabinLight is OFF
	}
}
 80006aa:	e005      	b.n	80006b8 <BackLightRelayCTRL+0x28>
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_REAR_CTRL); // Back CabinLight is OFF
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <BackLightRelayCTRL+0x30>)
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <BackLightRelayCTRL+0x30>)
 80006b2:	2110      	movs	r1, #16
 80006b4:	438a      	bics	r2, r1
 80006b6:	615a      	str	r2, [r3, #20]
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400

080006c4 <DickeyLightRelayCTRL>:

void DickeyLightRelayCTRL(int state){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (state){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <DickeyLightRelayCTRL+0x1c>
		GPIO_PORT_CABINLEDS->ODR |= GPIO_PIN_CAB_LIGHT_DICKEY_CTRL;  // Dickey CabinLight is ON
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <DickeyLightRelayCTRL+0x30>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <DickeyLightRelayCTRL+0x30>)
 80006d8:	2120      	movs	r1, #32
 80006da:	430a      	orrs	r2, r1
 80006dc:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_DICKEY_CTRL); // Dickey CabinLight is OFF
	}
}
 80006de:	e005      	b.n	80006ec <DickeyLightRelayCTRL+0x28>
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_DICKEY_CTRL); // Dickey CabinLight is OFF
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <DickeyLightRelayCTRL+0x30>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <DickeyLightRelayCTRL+0x30>)
 80006e6:	2120      	movs	r1, #32
 80006e8:	438a      	bics	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b002      	add	sp, #8
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	48000400 	.word	0x48000400

080006f8 <BuzzerCTRL>:

void BuzzerCTRL(int state){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if (state){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <BuzzerCTRL+0x1c>
		GPIO_PORT_BUZZER->ODR |= GPIO_PIN_BUZZER_CTRL;  // Buzzer is ON
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <BuzzerCTRL+0x30>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <BuzzerCTRL+0x30>)
 800070c:	2104      	movs	r1, #4
 800070e:	430a      	orrs	r2, r1
 8000710:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_BUZZER->ODR &= ~(GPIO_PIN_BUZZER_CTRL); // Buzzer is OFF
	}
}
 8000712:	e005      	b.n	8000720 <BuzzerCTRL+0x28>
		GPIO_PORT_BUZZER->ODR &= ~(GPIO_PIN_BUZZER_CTRL); // Buzzer is OFF
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <BuzzerCTRL+0x30>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <BuzzerCTRL+0x30>)
 800071a:	2104      	movs	r1, #4
 800071c:	438a      	bics	r2, r1
 800071e:	615a      	str	r2, [r3, #20]
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}
 8000728:	48000400 	.word	0x48000400

0800072c <BuzzerDriver>:

void BuzzerDriver(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if ((GPIO_PIN_CAB_DOOR_SW_FRNT_L == 0) || (GPIO_PIN_CAB_DOOR_SW_FRNT_R == 0) || (GPIO_PIN_CAB_DOOR_SW_REAR_L == 0) || (GPIO_PIN_CAB_DOOR_SW_REAR_R == 0) || (GPIO_PIN_CAB_DOOR_SW_DICKEY == 0)){
 8000730:	2390      	movs	r3, #144	; 0x90
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	691b      	ldr	r3, [r3, #16]
 8000736:	2220      	movs	r2, #32
 8000738:	4013      	ands	r3, r2
 800073a:	d018      	beq.n	800076e <BuzzerDriver+0x42>
 800073c:	2390      	movs	r3, #144	; 0x90
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	2210      	movs	r2, #16
 8000744:	4013      	ands	r3, r2
 8000746:	d012      	beq.n	800076e <BuzzerDriver+0x42>
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	691a      	ldr	r2, [r3, #16]
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	4013      	ands	r3, r2
 8000754:	d00b      	beq.n	800076e <BuzzerDriver+0x42>
 8000756:	2390      	movs	r3, #144	; 0x90
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	691a      	ldr	r2, [r3, #16]
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4013      	ands	r3, r2
 8000762:	d004      	beq.n	800076e <BuzzerDriver+0x42>
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <BuzzerDriver+0x58>)
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	2240      	movs	r2, #64	; 0x40
 800076a:	4013      	ands	r3, r2
 800076c:	d103      	bne.n	8000776 <BuzzerDriver+0x4a>
		BuzzerCTRL(ON);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff ffc2 	bl	80006f8 <BuzzerCTRL>
 8000774:	e003      	b.n	800077e <BuzzerDriver+0x52>
	}else{
		BuzzerCTRL(OFF);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ffbe 	bl	80006f8 <BuzzerCTRL>
	}
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	48000400 	.word	0x48000400

08000788 <ConfigureOutputPins>:

void ConfigureOutputPins(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

	// Enable clock for GPIO Port B and C
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ConfigureOutputPins+0x60>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <ConfigureOutputPins+0x60>)
 8000792:	21c0      	movs	r1, #192	; 0xc0
 8000794:	0309      	lsls	r1, r1, #12
 8000796:	430a      	orrs	r2, r1
 8000798:	615a      	str	r2, [r3, #20]

    // Configure pins PC3, PC4, PC15 as push-pull output
    GPIOC->MODER |= GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER15_0;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <ConfigureOutputPins+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <ConfigureOutputPins+0x64>)
 80007a0:	4913      	ldr	r1, [pc, #76]	; (80007f0 <ConfigureOutputPins+0x68>)
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]

    // Configure pins PC3, PC4, PC15 as high-speed output
    GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3 | GPIO_OSPEEDER_OSPEEDR4 | GPIO_OSPEEDER_OSPEEDR15;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <ConfigureOutputPins+0x64>)
 80007a8:	689a      	ldr	r2, [r3, #8]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <ConfigureOutputPins+0x64>)
 80007ac:	4911      	ldr	r1, [pc, #68]	; (80007f4 <ConfigureOutputPins+0x6c>)
 80007ae:	430a      	orrs	r2, r1
 80007b0:	609a      	str	r2, [r3, #8]

    // Set pins PC3, PC4, PC15 as push-pull
    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT_3 | GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_15);
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <ConfigureOutputPins+0x64>)
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <ConfigureOutputPins+0x64>)
 80007b8:	490f      	ldr	r1, [pc, #60]	; (80007f8 <ConfigureOutputPins+0x70>)
 80007ba:	400a      	ands	r2, r1
 80007bc:	605a      	str	r2, [r3, #4]

    // Configure pin PB1 output
    GPIOB->MODER |= GPIO_MODER_MODER1_0;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <ConfigureOutputPins+0x74>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <ConfigureOutputPins+0x74>)
 80007c4:	2104      	movs	r1, #4
 80007c6:	430a      	orrs	r2, r1
 80007c8:	601a      	str	r2, [r3, #0]

    // Configure pin PB1 as high-speed output
    GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <ConfigureOutputPins+0x74>)
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <ConfigureOutputPins+0x74>)
 80007d0:	210c      	movs	r1, #12
 80007d2:	430a      	orrs	r2, r1
 80007d4:	609a      	str	r2, [r3, #8]

    // Set pin PB1 as push-pull
    GPIOB->OTYPER &= ~GPIO_OTYPER_OT_1;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <ConfigureOutputPins+0x74>)
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <ConfigureOutputPins+0x74>)
 80007dc:	2102      	movs	r1, #2
 80007de:	438a      	bics	r2, r1
 80007e0:	605a      	str	r2, [r3, #4]
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000800 	.word	0x48000800
 80007f0:	40000140 	.word	0x40000140
 80007f4:	c00003c0 	.word	0xc00003c0
 80007f8:	ffff7fe7 	.word	0xffff7fe7
 80007fc:	48000400 	.word	0x48000400

08000800 <Check_Front_Door_Switches>:
    // Configure PB7 and PB8 as digital input with internal pull-down for Motor Drive Input and
    GPIOB->MODER &= ~(GPIO_MODER_MODER7 | GPIO_MODER_MODER8); // Clear bits
    GPIOB->PUPDR |= GPIO_PUPDR_PUPDR7_1 | GPIO_PUPDR_PUPDR8_1; // Set pull-down
}

int Check_Front_Door_Switches(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	int state = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
	if((GPIO_PIN_CAB_DOOR_SW_FRNT_L == 0)||(GPIO_PIN_CAB_DOOR_SW_FRNT_R == 0)){
 800080a:	2390      	movs	r3, #144	; 0x90
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	2220      	movs	r2, #32
 8000812:	4013      	ands	r3, r2
 8000814:	d005      	beq.n	8000822 <Check_Front_Door_Switches+0x22>
 8000816:	2390      	movs	r3, #144	; 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	2210      	movs	r2, #16
 800081e:	4013      	ands	r3, r2
 8000820:	d122      	bne.n	8000868 <Check_Front_Door_Switches+0x68>
		int pin = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	603b      	str	r3, [r7, #0]
	    pin  = (debounceSwitch(GPIO_PIN_CAB_DOOR_SW_FRNT_L) || debounceSwitch(GPIO_PIN_CAB_DOOR_SW_FRNT_R));
 8000826:	2390      	movs	r3, #144	; 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	b29b      	uxth	r3, r3
 800082e:	2220      	movs	r2, #32
 8000830:	4013      	ands	r3, r2
 8000832:	b29b      	uxth	r3, r3
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff fe7f 	bl	8000538 <debounceSwitch>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d10b      	bne.n	8000856 <Check_Front_Door_Switches+0x56>
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	b29b      	uxth	r3, r3
 8000846:	2210      	movs	r2, #16
 8000848:	4013      	ands	r3, r2
 800084a:	b29b      	uxth	r3, r3
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fe73 	bl	8000538 <debounceSwitch>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <Check_Front_Door_Switches+0x5a>
 8000856:	2301      	movs	r3, #1
 8000858:	e000      	b.n	800085c <Check_Front_Door_Switches+0x5c>
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
		if (pin==0){
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <Check_Front_Door_Switches+0x68>
			state = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
		}
	}
	return state;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}

08000872 <Check_Rear_Door_Switches>:

int Check_Rear_Door_Switches(void){
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
	int state = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
	if((GPIO_PIN_CAB_DOOR_SW_REAR_L == 0)||(GPIO_PIN_CAB_DOOR_SW_REAR_R == 0)){
 800087c:	2390      	movs	r3, #144	; 0x90
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	4013      	ands	r3, r2
 8000888:	d006      	beq.n	8000898 <Check_Rear_Door_Switches+0x26>
 800088a:	2390      	movs	r3, #144	; 0x90
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	691a      	ldr	r2, [r3, #16]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4013      	ands	r3, r2
 8000896:	d123      	bne.n	80008e0 <Check_Rear_Door_Switches+0x6e>
		int pin = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	603b      	str	r3, [r7, #0]
	    pin  = (debounceSwitch(GPIO_PIN_CAB_DOOR_SW_REAR_L) || debounceSwitch(GPIO_PIN_CAB_DOOR_SW_REAR_R));
 800089c:	2390      	movs	r3, #144	; 0x90
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	0bdb      	lsrs	r3, r3, #15
 80008a6:	03db      	lsls	r3, r3, #15
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	0018      	movs	r0, r3
 80008ac:	f7ff fe44 	bl	8000538 <debounceSwitch>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d10c      	bne.n	80008ce <Check_Rear_Door_Switches+0x5c>
 80008b4:	2390      	movs	r3, #144	; 0x90
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff fe37 	bl	8000538 <debounceSwitch>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <Check_Rear_Door_Switches+0x60>
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <Check_Rear_Door_Switches+0x62>
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
		if (pin==0){
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <Check_Rear_Door_Switches+0x6e>
			state = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
		}
	}
	return state;
 80008e0:	687b      	ldr	r3, [r7, #4]
}
 80008e2:	0018      	movs	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <Check_Dickey_Door_Switch>:

int Check_Dickey_Door_Switch(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	int state = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
	if(GPIO_PIN_CAB_DOOR_SW_DICKEY == 0){
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <Check_Dickey_Door_Switch+0x44>)
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	2240      	movs	r2, #64	; 0x40
 80008fc:	4013      	ands	r3, r2
 80008fe:	d111      	bne.n	8000924 <Check_Dickey_Door_Switch+0x38>
		int pin = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	603b      	str	r3, [r7, #0]
	    pin  = debounceSwitch(GPIO_PIN_CAB_DOOR_SW_DICKEY);
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <Check_Dickey_Door_Switch+0x44>)
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	b29b      	uxth	r3, r3
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	4013      	ands	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff fe11 	bl	8000538 <debounceSwitch>
 8000916:	0003      	movs	r3, r0
 8000918:	603b      	str	r3, [r7, #0]
		if (pin==0){
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <Check_Dickey_Door_Switch+0x38>
			state = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
		}
	}
	return state;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	48000400 	.word	0x48000400

08000934 <Check_Motor_Drive_Signal>:

int Check_Motor_Drive_Signal(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	if ((GPIO_PIN_MOTORDRIVE_SIGNAL != 0)){
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <Check_Motor_Drive_Signal+0x1c>)
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	4013      	ands	r3, r2
 8000940:	d001      	beq.n	8000946 <Check_Motor_Drive_Signal+0x12>
		return 1;
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <Check_Motor_Drive_Signal+0x14>
	}else{
		return 0;
 8000946:	2300      	movs	r3, #0
	}
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	48000400 	.word	0x48000400

08000954 <Check_Cab_On_Door_Signal>:

int Check_Cab_On_Door_Signal(void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	if ((GPIO_PIN_CAB_ON_DOOR_SIGNAL != 0)){
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <Check_Cab_On_Door_Signal+0x1c>)
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4013      	ands	r3, r2
 8000962:	d001      	beq.n	8000968 <Check_Cab_On_Door_Signal+0x14>
		return 1;
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <Check_Cab_On_Door_Signal+0x16>
	}else{
		return 0;
 8000968:	2300      	movs	r3, #0
	}
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	48000400 	.word	0x48000400

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	2101      	movs	r1, #1
 800098e:	430a      	orrs	r2, r1
 8000990:	619a      	str	r2, [r3, #24]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	2201      	movs	r2, #1
 8000998:	4013      	ands	r3, r2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	69da      	ldr	r2, [r3, #28]
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0549      	lsls	r1, r1, #21
 80009a8:	430a      	orrs	r2, r1
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_MspInit+0x44>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	055b      	lsls	r3, r3, #21
 80009b4:	4013      	ands	r3, r2
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08b      	sub	sp, #44	; 0x2c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	2414      	movs	r4, #20
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	2314      	movs	r3, #20
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f001 fcf4 	bl	80023c8 <memset>
  if(huart->Instance==USART2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <HAL_UART_MspInit+0x90>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d132      	bne.n	8000a50 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_UART_MspInit+0x94>)
 80009ec:	69da      	ldr	r2, [r3, #28]
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_UART_MspInit+0x94>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	0289      	lsls	r1, r1, #10
 80009f4:	430a      	orrs	r2, r1
 80009f6:	61da      	str	r2, [r3, #28]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x94>)
 80009fa:	69da      	ldr	r2, [r3, #28]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	029b      	lsls	r3, r3, #10
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_MspInit+0x94>)
 8000a08:	695a      	ldr	r2, [r3, #20]
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_UART_MspInit+0x94>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0289      	lsls	r1, r1, #10
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x94>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	029b      	lsls	r3, r3, #10
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a22:	0021      	movs	r1, r4
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	187a      	adds	r2, r7, r1
 8000a44:	2390      	movs	r3, #144	; 0x90
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f94e 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b00b      	add	sp, #44	; 0x2c
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a90:	f7ff fff6 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aba:	f001 fc8d 	bl	80023d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000abe:	f7ff fc1d 	bl	80002fc <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   r0, =_estack
 8000ac4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad0:	08002478 	.word	0x08002478
  ldr r2, =_sbss
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad8:	200000bc 	.word	0x200000bc

08000adc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_COMP_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <HAL_Init+0x24>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_Init+0x24>)
 8000aea:	2110      	movs	r1, #16
 8000aec:	430a      	orrs	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f809 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af6:	f7ff ff43 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b12:	681c      	ldr	r4, [r3, #0]
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_InitTick+0x60>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	0019      	movs	r1, r3
 8000b1a:	23fa      	movs	r3, #250	; 0xfa
 8000b1c:	0098      	lsls	r0, r3, #2
 8000b1e:	f7ff faf3 	bl	8000108 <__udivsi3>
 8000b22:	0003      	movs	r3, r0
 8000b24:	0019      	movs	r1, r3
 8000b26:	0020      	movs	r0, r4
 8000b28:	f7ff faee 	bl	8000108 <__udivsi3>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 f8cf 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e00f      	b.n	8000b5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d80b      	bhi.n	8000b5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2301      	movs	r3, #1
 8000b46:	425b      	negs	r3, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f8ac 	bl	8000ca8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_InitTick+0x64>)
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b003      	add	sp, #12
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	200000b8 	.word	0x200000b8

08000b84 <__NVIC_SetPriority>:
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b7f      	cmp	r3, #127	; 0x7f
 8000b98:	d828      	bhi.n	8000bec <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	33c0      	adds	r3, #192	; 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	589b      	ldr	r3, [r3, r2]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	430a      	orrs	r2, r1
 8000be4:	33c0      	adds	r3, #192	; 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	501a      	str	r2, [r3, r0]
}
 8000bea:	e031      	b.n	8000c50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	3b08      	subs	r3, #8
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	4023      	ands	r3, r4
 8000c40:	3b08      	subs	r3, #8
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	430a      	orrs	r2, r1
 8000c46:	3306      	adds	r3, #6
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	18c3      	adds	r3, r0, r3
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	045b      	lsls	r3, r3, #17
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d301      	bcc.n	8000c78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c74:	2301      	movs	r3, #1
 8000c76:	e010      	b.n	8000c9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <SysTick_Config+0x44>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2103      	movs	r1, #3
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff7c 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x44>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	1c02      	adds	r2, r0, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ffbf 	bl	8000c60 <SysTick_Config>
 8000ce2:	0003      	movs	r3, r0
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e155      	b.n	8000fa8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	4091      	lsls	r1, r2
 8000d06:	000a      	movs	r2, r1
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d100      	bne.n	8000d14 <HAL_GPIO_Init+0x28>
 8000d12:	e146      	b.n	8000fa2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d005      	beq.n	8000d2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2203      	movs	r2, #3
 8000d26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d130      	bne.n	8000d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d62:	2201      	movs	r2, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2203      	movs	r2, #3
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d017      	beq.n	8000dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2203      	movs	r2, #3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d123      	bne.n	8000e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	58d3      	ldr	r3, [r2, r3]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2207      	movs	r2, #7
 8000de8:	4013      	ands	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2107      	movs	r1, #7
 8000e02:	400b      	ands	r3, r1
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	6939      	ldr	r1, [r7, #16]
 8000e1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	23c0      	movs	r3, #192	; 0xc0
 8000e58:	029b      	lsls	r3, r3, #10
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <HAL_GPIO_Init+0x174>
 8000e5e:	e0a0      	b.n	8000fa2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e60:	4b57      	ldr	r3, [pc, #348]	; (8000fc0 <HAL_GPIO_Init+0x2d4>)
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <HAL_GPIO_Init+0x2d4>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	619a      	str	r2, [r3, #24]
 8000e6c:	4b54      	ldr	r3, [pc, #336]	; (8000fc0 <HAL_GPIO_Init+0x2d4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	2201      	movs	r2, #1
 8000e72:	4013      	ands	r3, r2
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e78:	4a52      	ldr	r2, [pc, #328]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	589b      	ldr	r3, [r3, r2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	409a      	lsls	r2, r3
 8000e92:	0013      	movs	r3, r2
 8000e94:	43da      	mvns	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	2390      	movs	r3, #144	; 0x90
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a47      	ldr	r2, [pc, #284]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x1ea>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a46      	ldr	r2, [pc, #280]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x1e6>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a45      	ldr	r2, [pc, #276]	; (8000fd0 <HAL_GPIO_Init+0x2e4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a44      	ldr	r2, [pc, #272]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x1de>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000eda:	2300      	movs	r3, #0
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	2103      	movs	r1, #3
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	035b      	lsls	r3, r3, #13
 8000f12:	4013      	ands	r3, r2
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	039b      	lsls	r3, r3, #14
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43da      	mvns	r2, r3
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	029b      	lsls	r3, r3, #10
 8000f66:	4013      	ands	r3, r2
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	4013      	ands	r3, r2
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	40da      	lsrs	r2, r3
 8000fb0:	1e13      	subs	r3, r2, #0
 8000fb2:	d000      	beq.n	8000fb6 <HAL_GPIO_Init+0x2ca>
 8000fb4:	e6a2      	b.n	8000cfc <HAL_GPIO_Init+0x10>
  } 
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b006      	add	sp, #24
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001000 	.word	0x48001000
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	f000 fb76 	bl	80016dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d100      	bne.n	8000ffc <HAL_RCC_OscConfig+0x20>
 8000ffa:	e08e      	b.n	800111a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ffc:	4bc5      	ldr	r3, [pc, #788]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	220c      	movs	r2, #12
 8001002:	4013      	ands	r3, r2
 8001004:	2b04      	cmp	r3, #4
 8001006:	d00e      	beq.n	8001026 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001008:	4bc2      	ldr	r3, [pc, #776]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	220c      	movs	r2, #12
 800100e:	4013      	ands	r3, r2
 8001010:	2b08      	cmp	r3, #8
 8001012:	d117      	bne.n	8001044 <HAL_RCC_OscConfig+0x68>
 8001014:	4bbf      	ldr	r3, [pc, #764]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	23c0      	movs	r3, #192	; 0xc0
 800101a:	025b      	lsls	r3, r3, #9
 800101c:	401a      	ands	r2, r3
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	025b      	lsls	r3, r3, #9
 8001022:	429a      	cmp	r2, r3
 8001024:	d10e      	bne.n	8001044 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4bbb      	ldr	r3, [pc, #748]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d100      	bne.n	8001034 <HAL_RCC_OscConfig+0x58>
 8001032:	e071      	b.n	8001118 <HAL_RCC_OscConfig+0x13c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d000      	beq.n	800103e <HAL_RCC_OscConfig+0x62>
 800103c:	e06c      	b.n	8001118 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	f000 fb4c 	bl	80016dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d107      	bne.n	800105c <HAL_RCC_OscConfig+0x80>
 800104c:	4bb1      	ldr	r3, [pc, #708]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4bb0      	ldr	r3, [pc, #704]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	0249      	lsls	r1, r1, #9
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e02f      	b.n	80010bc <HAL_RCC_OscConfig+0xe0>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10c      	bne.n	800107e <HAL_RCC_OscConfig+0xa2>
 8001064:	4bab      	ldr	r3, [pc, #684]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4baa      	ldr	r3, [pc, #680]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800106a:	49ab      	ldr	r1, [pc, #684]	; (8001318 <HAL_RCC_OscConfig+0x33c>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	4ba8      	ldr	r3, [pc, #672]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4ba7      	ldr	r3, [pc, #668]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001076:	49a9      	ldr	r1, [pc, #676]	; (800131c <HAL_RCC_OscConfig+0x340>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e01e      	b.n	80010bc <HAL_RCC_OscConfig+0xe0>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d10e      	bne.n	80010a4 <HAL_RCC_OscConfig+0xc8>
 8001086:	4ba3      	ldr	r3, [pc, #652]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4ba2      	ldr	r3, [pc, #648]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	02c9      	lsls	r1, r1, #11
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	4b9f      	ldr	r3, [pc, #636]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b9e      	ldr	r3, [pc, #632]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0249      	lsls	r1, r1, #9
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xe0>
 80010a4:	4b9b      	ldr	r3, [pc, #620]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b9a      	ldr	r3, [pc, #616]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80010aa:	499b      	ldr	r1, [pc, #620]	; (8001318 <HAL_RCC_OscConfig+0x33c>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	4b98      	ldr	r3, [pc, #608]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b97      	ldr	r3, [pc, #604]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80010b6:	4999      	ldr	r1, [pc, #612]	; (800131c <HAL_RCC_OscConfig+0x340>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fd54 	bl	8000b70 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ce:	f7ff fd4f 	bl	8000b70 <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e2fd      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e0:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0xf2>
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fd3f 	bl	8000b70 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fd3a 	bl	8000b70 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e2e8      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	4b82      	ldr	r3, [pc, #520]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x11c>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d100      	bne.n	8001126 <HAL_RCC_OscConfig+0x14a>
 8001124:	e06c      	b.n	8001200 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	220c      	movs	r2, #12
 800112c:	4013      	ands	r3, r2
 800112e:	d00e      	beq.n	800114e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001130:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	220c      	movs	r2, #12
 8001136:	4013      	ands	r3, r2
 8001138:	2b08      	cmp	r3, #8
 800113a:	d11f      	bne.n	800117c <HAL_RCC_OscConfig+0x1a0>
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	401a      	ands	r2, r3
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	429a      	cmp	r2, r3
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b71      	ldr	r3, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x188>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d001      	beq.n	8001164 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e2bb      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	22f8      	movs	r2, #248	; 0xf8
 800116a:	4393      	bics	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00da      	lsls	r2, r3, #3
 8001174:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e041      	b.n	8001200 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d024      	beq.n	80011ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fcee 	bl	8000b70 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fce9 	bl	8000b70 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e297      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2202      	movs	r2, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f1      	beq.n	800119a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b57      	ldr	r3, [pc, #348]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	22f8      	movs	r2, #248	; 0xf8
 80011bc:	4393      	bics	r3, r2
 80011be:	0019      	movs	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	00da      	lsls	r2, r3, #3
 80011c6:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e018      	b.n	8001200 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ce:	4b51      	ldr	r3, [pc, #324]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	438a      	bics	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fcc9 	bl	8000b70 <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fcc4 	bl	8000b70 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e272      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2202      	movs	r2, #2
 80011fc:	4013      	ands	r3, r2
 80011fe:	d1f1      	bne.n	80011e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	4013      	ands	r3, r2
 8001208:	d036      	beq.n	8001278 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001218:	2101      	movs	r1, #1
 800121a:	430a      	orrs	r2, r1
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fca7 	bl	8000b70 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fca2 	bl	8000b70 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e250      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4b36      	ldr	r3, [pc, #216]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d0f1      	beq.n	8001228 <HAL_RCC_OscConfig+0x24c>
 8001244:	e018      	b.n	8001278 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001246:	4b33      	ldr	r3, [pc, #204]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800124c:	2101      	movs	r1, #1
 800124e:	438a      	bics	r2, r1
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fc8d 	bl	8000b70 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc88 	bl	8000b70 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e236      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2202      	movs	r2, #2
 8001274:	4013      	ands	r3, r2
 8001276:	d1f1      	bne.n	800125c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2204      	movs	r2, #4
 800127e:	4013      	ands	r3, r2
 8001280:	d100      	bne.n	8001284 <HAL_RCC_OscConfig+0x2a8>
 8001282:	e0b5      	b.n	80013f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001284:	201f      	movs	r0, #31
 8001286:	183b      	adds	r3, r7, r0
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	055b      	lsls	r3, r3, #21
 8001294:	4013      	ands	r3, r2
 8001296:	d110      	bne.n	80012ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800129a:	69da      	ldr	r2, [r3, #28]
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0549      	lsls	r1, r1, #21
 80012a2:	430a      	orrs	r2, r1
 80012a4:	61da      	str	r2, [r3, #28]
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80012a8:	69da      	ldr	r2, [r3, #28]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	055b      	lsls	r3, r3, #21
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_RCC_OscConfig+0x344>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	d11a      	bne.n	80012fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_RCC_OscConfig+0x344>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_RCC_OscConfig+0x344>)
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	0049      	lsls	r1, r1, #1
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fc4c 	bl	8000b70 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012de:	f7ff fc47 	bl	8000b70 <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b64      	cmp	r3, #100	; 0x64
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e1f5      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x344>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10f      	bne.n	8001324 <HAL_RCC_OscConfig+0x348>
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 800130a:	2101      	movs	r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	621a      	str	r2, [r3, #32]
 8001310:	e036      	b.n	8001380 <HAL_RCC_OscConfig+0x3a4>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	40021000 	.word	0x40021000
 8001318:	fffeffff 	.word	0xfffeffff
 800131c:	fffbffff 	.word	0xfffbffff
 8001320:	40007000 	.word	0x40007000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x36a>
 800132c:	4bca      	ldr	r3, [pc, #808]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	4bc9      	ldr	r3, [pc, #804]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	621a      	str	r2, [r3, #32]
 8001338:	4bc7      	ldr	r3, [pc, #796]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	4bc6      	ldr	r3, [pc, #792]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800133e:	2104      	movs	r1, #4
 8001340:	438a      	bics	r2, r1
 8001342:	621a      	str	r2, [r3, #32]
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0x3a4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x38c>
 800134e:	4bc2      	ldr	r3, [pc, #776]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4bc1      	ldr	r3, [pc, #772]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001354:	2104      	movs	r1, #4
 8001356:	430a      	orrs	r2, r1
 8001358:	621a      	str	r2, [r3, #32]
 800135a:	4bbf      	ldr	r3, [pc, #764]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4bbe      	ldr	r3, [pc, #760]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001360:	2101      	movs	r1, #1
 8001362:	430a      	orrs	r2, r1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0x3a4>
 8001368:	4bbb      	ldr	r3, [pc, #748]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	4bba      	ldr	r3, [pc, #744]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800136e:	2101      	movs	r1, #1
 8001370:	438a      	bics	r2, r1
 8001372:	621a      	str	r2, [r3, #32]
 8001374:	4bb8      	ldr	r3, [pc, #736]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4bb7      	ldr	r3, [pc, #732]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800137a:	2104      	movs	r1, #4
 800137c:	438a      	bics	r2, r1
 800137e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fbf2 	bl	8000b70 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e009      	b.n	80013a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fbed 	bl	8000b70 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4aaf      	ldr	r2, [pc, #700]	; (800165c <HAL_RCC_OscConfig+0x680>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e19a      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	4bac      	ldr	r3, [pc, #688]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x3b6>
 80013b0:	e013      	b.n	80013da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbdd 	bl	8000b70 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ba:	e009      	b.n	80013d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fbd8 	bl	8000b70 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4aa5      	ldr	r2, [pc, #660]	; (800165c <HAL_RCC_OscConfig+0x680>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e185      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4ba1      	ldr	r3, [pc, #644]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013da:	231f      	movs	r3, #31
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4b9c      	ldr	r3, [pc, #624]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	4b9b      	ldr	r3, [pc, #620]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80013ea:	499d      	ldr	r1, [pc, #628]	; (8001660 <HAL_RCC_OscConfig+0x684>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2210      	movs	r2, #16
 80013f6:	4013      	ands	r3, r2
 80013f8:	d063      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12a      	bne.n	8001458 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001402:	4b95      	ldr	r3, [pc, #596]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001406:	4b94      	ldr	r3, [pc, #592]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001408:	2104      	movs	r1, #4
 800140a:	430a      	orrs	r2, r1
 800140c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800140e:	4b92      	ldr	r3, [pc, #584]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001412:	4b91      	ldr	r3, [pc, #580]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fba9 	bl	8000b70 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001424:	f7ff fba4 	bl	8000b70 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e152      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d0f1      	beq.n	8001424 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001440:	4b85      	ldr	r3, [pc, #532]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	22f8      	movs	r2, #248	; 0xf8
 8001446:	4393      	bics	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	00da      	lsls	r2, r3, #3
 8001450:	4b81      	ldr	r3, [pc, #516]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e034      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	3305      	adds	r3, #5
 800145e:	d111      	bne.n	8001484 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001460:	4b7d      	ldr	r3, [pc, #500]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001464:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800146c:	4b7a      	ldr	r3, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	22f8      	movs	r2, #248	; 0xf8
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	00da      	lsls	r2, r3, #3
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e01e      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001484:	4b74      	ldr	r3, [pc, #464]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	4b73      	ldr	r3, [pc, #460]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800148a:	2104      	movs	r1, #4
 800148c:	430a      	orrs	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001490:	4b71      	ldr	r3, [pc, #452]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fb68 	bl	8000b70 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014a6:	f7ff fb63 	bl	8000b70 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e111      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b8:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f1      	bne.n	80014a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2220      	movs	r2, #32
 80014c8:	4013      	ands	r3, r2
 80014ca:	d05c      	beq.n	8001586 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	220c      	movs	r2, #12
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d00e      	beq.n	80014f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	220c      	movs	r2, #12
 80014de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d114      	bne.n	800150e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014e4:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	23c0      	movs	r3, #192	; 0xc0
 80014ea:	025b      	lsls	r3, r3, #9
 80014ec:	401a      	ands	r2, r3
 80014ee:	23c0      	movs	r3, #192	; 0xc0
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014f6:	4b58      	ldr	r3, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	029b      	lsls	r3, r3, #10
 80014fe:	4013      	ands	r3, r2
 8001500:	d040      	beq.n	8001584 <HAL_RCC_OscConfig+0x5a8>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d03c      	beq.n	8001584 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0e6      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01b      	beq.n	800154e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151a:	4b4f      	ldr	r3, [pc, #316]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	0249      	lsls	r1, r1, #9
 8001520:	430a      	orrs	r2, r1
 8001522:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fb24 	bl	8000b70 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152e:	f7ff fb1f 	bl	8000b70 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0cd      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x552>
 800154c:	e01b      	b.n	8001586 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001552:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001554:	4943      	ldr	r1, [pc, #268]	; (8001664 <HAL_RCC_OscConfig+0x688>)
 8001556:	400a      	ands	r2, r1
 8001558:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fb09 	bl	8000b70 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001564:	f7ff fb04 	bl	8000b70 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0b2      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	029b      	lsls	r3, r3, #10
 800157e:	4013      	ands	r3, r2
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x588>
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001584:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <HAL_RCC_OscConfig+0x5b4>
 800158e:	e0a4      	b.n	80016da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	220c      	movs	r2, #12
 8001596:	4013      	ands	r3, r2
 8001598:	2b08      	cmp	r3, #8
 800159a:	d100      	bne.n	800159e <HAL_RCC_OscConfig+0x5c2>
 800159c:	e078      	b.n	8001690 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d14c      	bne.n	8001640 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80015ac:	492e      	ldr	r1, [pc, #184]	; (8001668 <HAL_RCC_OscConfig+0x68c>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fadd 	bl	8000b70 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fad8 	bl	8000b70 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e086      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	049b      	lsls	r3, r3, #18
 80015d6:	4013      	ands	r3, r2
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	220f      	movs	r2, #15
 80015e0:	4393      	bics	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_RCC_OscConfig+0x690>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	431a      	orrs	r2, r3
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0449      	lsls	r1, r1, #17
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faab 	bl	8000b70 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff faa6 	bl	8000b70 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e054      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	049b      	lsls	r3, r3, #18
 800163a:	4013      	ands	r3, r2
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x644>
 800163e:	e04c      	b.n	80016da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_RCC_OscConfig+0x67c>)
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <HAL_RCC_OscConfig+0x68c>)
 8001648:	400a      	ands	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fa90 	bl	8000b70 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x6a6>
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	40021000 	.word	0x40021000
 800165c:	00001388 	.word	0x00001388
 8001660:	efffffff 	.word	0xefffffff
 8001664:	fffeffff 	.word	0xfffeffff
 8001668:	feffffff 	.word	0xfeffffff
 800166c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fa7e 	bl	8000b70 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e02c      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_RCC_OscConfig+0x708>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	049b      	lsls	r3, r3, #18
 800168a:	4013      	ands	r3, r2
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x694>
 800168e:	e024      	b.n	80016da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e01f      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_RCC_OscConfig+0x708>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_RCC_OscConfig+0x708>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	23c0      	movs	r3, #192	; 0xc0
 80016ac:	025b      	lsls	r3, r3, #9
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d10e      	bne.n	80016d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	220f      	movs	r2, #15
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	23f0      	movs	r3, #240	; 0xf0
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	401a      	ands	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b008      	add	sp, #32
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0bf      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2201      	movs	r2, #1
 8001702:	4013      	ands	r3, r2
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d911      	bls.n	800172e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0a6      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d015      	beq.n	8001764 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2204      	movs	r2, #4
 800173e:	4013      	ands	r3, r2
 8001740:	d006      	beq.n	8001750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001748:	21e0      	movs	r1, #224	; 0xe0
 800174a:	00c9      	lsls	r1, r1, #3
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	22f0      	movs	r2, #240	; 0xf0
 8001756:	4393      	bics	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	4013      	ands	r3, r2
 800176c:	d04c      	beq.n	8001808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b44      	ldr	r3, [pc, #272]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	029b      	lsls	r3, r3, #10
 800177e:	4013      	ands	r3, r2
 8001780:	d120      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07a      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	049b      	lsls	r3, r3, #18
 8001796:	4013      	ands	r3, r2
 8001798:	d114      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06e      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	029b      	lsls	r3, r3, #10
 80017ae:	4013      	ands	r3, r2
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e062      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2202      	movs	r2, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e05b      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	4393      	bics	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d8:	f7ff f9ca 	bl	8000b70 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e0:	e009      	b.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e2:	f7ff f9c5 	bl	8000b70 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_RCC_ClockConfig+0x1a4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e042      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	220c      	movs	r2, #12
 80017fc:	401a      	ands	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1ec      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d211      	bcs.n	800183a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2201      	movs	r2, #1
 800181c:	4393      	bics	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_RCC_ClockConfig+0x19c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e020      	b.n	800187c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2204      	movs	r2, #4
 8001840:	4013      	ands	r3, r2
 8001842:	d009      	beq.n	8001858 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_RCC_ClockConfig+0x1a8>)
 800184a:	4013      	ands	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001858:	f000 f820 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800185c:	0001      	movs	r1, r0
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	220f      	movs	r2, #15
 8001866:	4013      	ands	r3, r2
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x1ac>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	000a      	movs	r2, r1
 800186e:	40da      	lsrs	r2, r3
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001872:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001874:	2003      	movs	r0, #3
 8001876:	f7ff f947 	bl	8000b08 <HAL_InitTick>
  
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40022000 	.word	0x40022000
 8001888:	40021000 	.word	0x40021000
 800188c:	00001388 	.word	0x00001388
 8001890:	fffff8ff 	.word	0xfffff8ff
 8001894:	08002438 	.word	0x08002438
 8001898:	20000000 	.word	0x20000000

0800189c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_RCC_GetSysClockFreq+0xd0>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	220c      	movs	r2, #12
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d046      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0xb8>
 80018c6:	d848      	bhi.n	800195a <HAL_RCC_GetSysClockFreq+0xbe>
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d002      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x36>
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d003      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x3c>
 80018d0:	e043      	b.n	800195a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018d4:	613b      	str	r3, [r7, #16]
      break;
 80018d6:	e043      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	0c9b      	lsrs	r3, r3, #18
 80018dc:	220f      	movs	r2, #15
 80018de:	4013      	ands	r3, r2
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_RCC_GetSysClockFreq+0xd8>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_GetSysClockFreq+0xd0>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	220f      	movs	r2, #15
 80018ec:	4013      	ands	r3, r2
 80018ee:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_RCC_GetSysClockFreq+0xdc>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	23c0      	movs	r3, #192	; 0xc0
 80018f8:	025b      	lsls	r3, r3, #9
 80018fa:	401a      	ands	r2, r3
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	429a      	cmp	r2, r3
 8001902:	d109      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	481a      	ldr	r0, [pc, #104]	; (8001970 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001908:	f7fe fbfe 	bl	8000108 <__udivsi3>
 800190c:	0003      	movs	r3, r0
 800190e:	001a      	movs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4353      	muls	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e01a      	b.n	800194e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	23c0      	movs	r3, #192	; 0xc0
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	401a      	ands	r2, r3
 8001920:	23c0      	movs	r3, #192	; 0xc0
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	429a      	cmp	r2, r3
 8001926:	d109      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	4814      	ldr	r0, [pc, #80]	; (800197c <HAL_RCC_GetSysClockFreq+0xe0>)
 800192c:	f7fe fbec 	bl	8000108 <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4353      	muls	r3, r2
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e008      	b.n	800194e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001940:	f7fe fbe2 	bl	8000108 <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	001a      	movs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4353      	muls	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	613b      	str	r3, [r7, #16]
      break;
 8001952:	e005      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001956:	613b      	str	r3, [r7, #16]
      break;
 8001958:	e002      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetSysClockFreq+0xd4>)
 800195c:	613b      	str	r3, [r7, #16]
      break;
 800195e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001960:	693b      	ldr	r3, [r7, #16]
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b006      	add	sp, #24
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40021000 	.word	0x40021000
 8001970:	007a1200 	.word	0x007a1200
 8001974:	08002450 	.word	0x08002450
 8001978:	08002460 	.word	0x08002460
 800197c:	02dc6c00 	.word	0x02dc6c00

08001980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <HAL_RCC_GetHCLKFreq+0x10>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	20000000 	.word	0x20000000

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001998:	f7ff fff2 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 800199c:	0001      	movs	r1, r0
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	2207      	movs	r2, #7
 80019a6:	4013      	ands	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	40d9      	lsrs	r1, r3
 80019ae:	000b      	movs	r3, r1
}    
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	40021000 	.word	0x40021000
 80019bc:	08002448 	.word	0x08002448

080019c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	025b      	lsls	r3, r3, #9
 80019d8:	4013      	ands	r3, r2
 80019da:	d100      	bne.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019dc:	e08e      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2017      	movs	r0, #23
 80019e0:	183b      	adds	r3, r7, r0
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b6e      	ldr	r3, [pc, #440]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	055b      	lsls	r3, r3, #21
 80019ee:	4013      	ands	r3, r2
 80019f0:	d110      	bne.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0549      	lsls	r1, r1, #21
 80019fc:	430a      	orrs	r2, r1
 80019fe:	61da      	str	r2, [r3, #28]
 8001a00:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	183b      	adds	r3, r7, r0
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b63      	ldr	r3, [pc, #396]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d11a      	bne.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a20:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0049      	lsls	r1, r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f89f 	bl	8000b70 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	e008      	b.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a38:	f7ff f89a 	bl	8000b70 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0a6      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a56:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d034      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	23c0      	movs	r3, #192	; 0xc0
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d02c      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0249      	lsls	r1, r1, #9
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a90:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a96:	4945      	ldr	r1, [pc, #276]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a9c:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f861 	bl	8000b70 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	e009      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f85c 	bl	8000b70 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e067      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae6:	2317      	movs	r3, #23
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af6:	492f      	ldr	r1, [pc, #188]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
 8001b22:	d009      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d009      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	2210      	movs	r2, #16
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d009      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d009      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	4393      	bics	r3, r2
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	fffffcff 	.word	0xfffffcff
 8001bac:	fffeffff 	.word	0xfffeffff
 8001bb0:	00001388 	.word	0x00001388
 8001bb4:	efffffff 	.word	0xefffffff
 8001bb8:	fffcffff 	.word	0xfffcffff

08001bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e044      	b.n	8001c58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2278      	movs	r2, #120	; 0x78
 8001bda:	2100      	movs	r1, #0
 8001bdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7fe fef1 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2224      	movs	r2, #36	; 0x24
 8001bea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 f830 	bl	8001c64 <UART_SetConfig>
 8001c04:	0003      	movs	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e024      	b.n	8001c58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 f9ab 	bl	8001f74 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	490d      	ldr	r1, [pc, #52]	; (8001c60 <HAL_UART_Init+0xa4>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	212a      	movs	r1, #42	; 0x2a
 8001c3a:	438a      	bics	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 fa43 	bl	80020dc <UART_CheckIdleState>
 8001c56:	0003      	movs	r3, r0
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	ffffb7ff 	.word	0xffffb7ff

08001c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c6c:	231e      	movs	r3, #30
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4aaf      	ldr	r2, [pc, #700]	; (8001f50 <UART_SetConfig+0x2ec>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4aaa      	ldr	r2, [pc, #680]	; (8001f54 <UART_SetConfig+0x2f0>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4aa1      	ldr	r2, [pc, #644]	; (8001f58 <UART_SetConfig+0x2f4>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a9d      	ldr	r2, [pc, #628]	; (8001f5c <UART_SetConfig+0x2f8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d127      	bne.n	8001d3a <UART_SetConfig+0xd6>
 8001cea:	4b9d      	ldr	r3, [pc, #628]	; (8001f60 <UART_SetConfig+0x2fc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d00d      	beq.n	8001d12 <UART_SetConfig+0xae>
 8001cf6:	d81b      	bhi.n	8001d30 <UART_SetConfig+0xcc>
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d014      	beq.n	8001d26 <UART_SetConfig+0xc2>
 8001cfc:	d818      	bhi.n	8001d30 <UART_SetConfig+0xcc>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <UART_SetConfig+0xa4>
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d00a      	beq.n	8001d1c <UART_SetConfig+0xb8>
 8001d06:	e013      	b.n	8001d30 <UART_SetConfig+0xcc>
 8001d08:	231f      	movs	r3, #31
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e065      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d12:	231f      	movs	r3, #31
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e060      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d1c:	231f      	movs	r3, #31
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2204      	movs	r2, #4
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e05b      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d26:	231f      	movs	r3, #31
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e056      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d30:	231f      	movs	r3, #31
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2210      	movs	r2, #16
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e051      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <UART_SetConfig+0x300>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d134      	bne.n	8001dae <UART_SetConfig+0x14a>
 8001d44:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <UART_SetConfig+0x2fc>)
 8001d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d48:	23c0      	movs	r3, #192	; 0xc0
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	22c0      	movs	r2, #192	; 0xc0
 8001d50:	0292      	lsls	r2, r2, #10
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d017      	beq.n	8001d86 <UART_SetConfig+0x122>
 8001d56:	22c0      	movs	r2, #192	; 0xc0
 8001d58:	0292      	lsls	r2, r2, #10
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d822      	bhi.n	8001da4 <UART_SetConfig+0x140>
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	0292      	lsls	r2, r2, #10
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <UART_SetConfig+0x136>
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0292      	lsls	r2, r2, #10
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d81a      	bhi.n	8001da4 <UART_SetConfig+0x140>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <UART_SetConfig+0x118>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0252      	lsls	r2, r2, #9
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00a      	beq.n	8001d90 <UART_SetConfig+0x12c>
 8001d7a:	e013      	b.n	8001da4 <UART_SetConfig+0x140>
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e02b      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d86:	231f      	movs	r3, #31
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e026      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d90:	231f      	movs	r3, #31
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2204      	movs	r2, #4
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e021      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	2208      	movs	r2, #8
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e01c      	b.n	8001dde <UART_SetConfig+0x17a>
 8001da4:	231f      	movs	r3, #31
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2210      	movs	r2, #16
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	e017      	b.n	8001dde <UART_SetConfig+0x17a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6d      	ldr	r2, [pc, #436]	; (8001f68 <UART_SetConfig+0x304>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d104      	bne.n	8001dc2 <UART_SetConfig+0x15e>
 8001db8:	231f      	movs	r3, #31
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e00d      	b.n	8001dde <UART_SetConfig+0x17a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a69      	ldr	r2, [pc, #420]	; (8001f6c <UART_SetConfig+0x308>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d104      	bne.n	8001dd6 <UART_SetConfig+0x172>
 8001dcc:	231f      	movs	r3, #31
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e003      	b.n	8001dde <UART_SetConfig+0x17a>
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2210      	movs	r2, #16
 8001ddc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d15c      	bne.n	8001ea4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8001dea:	231f      	movs	r3, #31
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d015      	beq.n	8001e20 <UART_SetConfig+0x1bc>
 8001df4:	dc18      	bgt.n	8001e28 <UART_SetConfig+0x1c4>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d00d      	beq.n	8001e16 <UART_SetConfig+0x1b2>
 8001dfa:	dc15      	bgt.n	8001e28 <UART_SetConfig+0x1c4>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <UART_SetConfig+0x1a2>
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d005      	beq.n	8001e10 <UART_SetConfig+0x1ac>
 8001e04:	e010      	b.n	8001e28 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e06:	f7ff fdc5 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]
        break;
 8001e0e:	e012      	b.n	8001e36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e10:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <UART_SetConfig+0x30c>)
 8001e12:	61bb      	str	r3, [r7, #24]
        break;
 8001e14:	e00f      	b.n	8001e36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e16:	f7ff fd41 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
        break;
 8001e1e:	e00a      	b.n	8001e36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	61bb      	str	r3, [r7, #24]
        break;
 8001e26:	e006      	b.n	8001e36 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e2c:	231e      	movs	r3, #30
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
        break;
 8001e34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d100      	bne.n	8001e3e <UART_SetConfig+0x1da>
 8001e3c:	e07a      	b.n	8001f34 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	005a      	lsls	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	18d2      	adds	r2, r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0019      	movs	r1, r3
 8001e50:	0010      	movs	r0, r2
 8001e52:	f7fe f959 	bl	8000108 <__udivsi3>
 8001e56:	0003      	movs	r3, r0
 8001e58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d91c      	bls.n	8001e9a <UART_SetConfig+0x236>
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d217      	bcs.n	8001e9a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	200e      	movs	r0, #14
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	210f      	movs	r1, #15
 8001e74:	438a      	bics	r2, r1
 8001e76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2207      	movs	r2, #7
 8001e80:	4013      	ands	r3, r2
 8001e82:	b299      	uxth	r1, r3
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	183a      	adds	r2, r7, r0
 8001e88:	8812      	ldrh	r2, [r2, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	183a      	adds	r2, r7, r0
 8001e94:	8812      	ldrh	r2, [r2, #0]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	e04c      	b.n	8001f34 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001e9a:	231e      	movs	r3, #30
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e047      	b.n	8001f34 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ea4:	231f      	movs	r3, #31
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d015      	beq.n	8001eda <UART_SetConfig+0x276>
 8001eae:	dc18      	bgt.n	8001ee2 <UART_SetConfig+0x27e>
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d00d      	beq.n	8001ed0 <UART_SetConfig+0x26c>
 8001eb4:	dc15      	bgt.n	8001ee2 <UART_SetConfig+0x27e>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <UART_SetConfig+0x25c>
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d005      	beq.n	8001eca <UART_SetConfig+0x266>
 8001ebe:	e010      	b.n	8001ee2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ec0:	f7ff fd68 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	61bb      	str	r3, [r7, #24]
        break;
 8001ec8:	e012      	b.n	8001ef0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <UART_SetConfig+0x30c>)
 8001ecc:	61bb      	str	r3, [r7, #24]
        break;
 8001ece:	e00f      	b.n	8001ef0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ed0:	f7ff fce4 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	61bb      	str	r3, [r7, #24]
        break;
 8001ed8:	e00a      	b.n	8001ef0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	61bb      	str	r3, [r7, #24]
        break;
 8001ee0:	e006      	b.n	8001ef0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ee6:	231e      	movs	r3, #30
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
        break;
 8001eee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01e      	beq.n	8001f34 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	085a      	lsrs	r2, r3, #1
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	18d2      	adds	r2, r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	0019      	movs	r1, r3
 8001f06:	0010      	movs	r0, r2
 8001f08:	f7fe f8fe 	bl	8000108 <__udivsi3>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	d90a      	bls.n	8001f2c <UART_SetConfig+0x2c8>
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d205      	bcs.n	8001f2c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e003      	b.n	8001f34 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001f2c:	231e      	movs	r3, #30
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001f40:	231e      	movs	r3, #30
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	781b      	ldrb	r3, [r3, #0]
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b008      	add	sp, #32
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	efff69f3 	.word	0xefff69f3
 8001f54:	ffffcfff 	.word	0xffffcfff
 8001f58:	fffff4ff 	.word	0xfffff4ff
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40004800 	.word	0x40004800
 8001f6c:	40004c00 	.word	0x40004c00
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d00b      	beq.n	8001f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <UART_AdvFeatureConfig+0x144>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d00b      	beq.n	8001fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a43      	ldr	r2, [pc, #268]	; (80020bc <UART_AdvFeatureConfig+0x148>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d00b      	beq.n	8001fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <UART_AdvFeatureConfig+0x14c>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d00b      	beq.n	8002004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <UART_AdvFeatureConfig+0x150>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2210      	movs	r2, #16
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <UART_AdvFeatureConfig+0x154>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2220      	movs	r2, #32
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <UART_AdvFeatureConfig+0x158>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	4013      	ands	r3, r2
 8002050:	d01d      	beq.n	800208e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <UART_AdvFeatureConfig+0x15c>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	035b      	lsls	r3, r3, #13
 8002072:	429a      	cmp	r2, r3
 8002074:	d10b      	bne.n	800208e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <UART_AdvFeatureConfig+0x160>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4013      	ands	r3, r2
 8002096:	d00b      	beq.n	80020b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <UART_AdvFeatureConfig+0x164>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
  }
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	fffdffff 	.word	0xfffdffff
 80020bc:	fffeffff 	.word	0xfffeffff
 80020c0:	fffbffff 	.word	0xfffbffff
 80020c4:	ffff7fff 	.word	0xffff7fff
 80020c8:	ffffefff 	.word	0xffffefff
 80020cc:	ffffdfff 	.word	0xffffdfff
 80020d0:	ffefffff 	.word	0xffefffff
 80020d4:	ff9fffff 	.word	0xff9fffff
 80020d8:	fff7ffff 	.word	0xfff7ffff

080020dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b092      	sub	sp, #72	; 0x48
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2284      	movs	r2, #132	; 0x84
 80020e8:	2100      	movs	r1, #0
 80020ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80020ec:	f7fe fd40 	bl	8000b70 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2208      	movs	r2, #8
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d12c      	bne.n	800215c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	0391      	lsls	r1, r2, #14
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4a46      	ldr	r2, [pc, #280]	; (8002224 <UART_CheckIdleState+0x148>)
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	f000 f88c 	bl	800222c <UART_WaitOnFlagUntilTimeout>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d021      	beq.n	800215c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002118:	f3ef 8310 	mrs	r3, PRIMASK
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002120:	63bb      	str	r3, [r7, #56]	; 0x38
 8002122:	2301      	movs	r3, #1
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	f383 8810 	msr	PRIMASK, r3
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	438a      	bics	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	f383 8810 	msr	PRIMASK, r3
}
 8002148:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2278      	movs	r2, #120	; 0x78
 8002154:	2100      	movs	r1, #0
 8002156:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e05f      	b.n	800221c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2204      	movs	r2, #4
 8002164:	4013      	ands	r3, r2
 8002166:	2b04      	cmp	r3, #4
 8002168:	d146      	bne.n	80021f8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800216a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	03d1      	lsls	r1, r2, #15
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <UART_CheckIdleState+0x148>)
 8002174:	9200      	str	r2, [sp, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	f000 f858 	bl	800222c <UART_WaitOnFlagUntilTimeout>
 800217c:	1e03      	subs	r3, r0, #0
 800217e:	d03b      	beq.n	80021f8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002180:	f3ef 8310 	mrs	r3, PRIMASK
 8002184:	60fb      	str	r3, [r7, #12]
  return(result);
 8002186:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
 800218a:	2301      	movs	r3, #1
 800218c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f383 8810 	msr	PRIMASK, r3
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4921      	ldr	r1, [pc, #132]	; (8002228 <UART_CheckIdleState+0x14c>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f383 8810 	msr	PRIMASK, r3
}
 80021b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b2:	f3ef 8310 	mrs	r3, PRIMASK
 80021b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80021b8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
 80021bc:	2301      	movs	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f383 8810 	msr	PRIMASK, r3
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	438a      	bics	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f383 8810 	msr	PRIMASK, r3
}
 80021e2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	2120      	movs	r1, #32
 80021ea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2278      	movs	r2, #120	; 0x78
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e011      	b.n	800221c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	2120      	movs	r1, #32
 8002204:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2278      	movs	r2, #120	; 0x78
 8002216:	2100      	movs	r1, #0
 8002218:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b010      	add	sp, #64	; 0x40
 8002222:	bd80      	pop	{r7, pc}
 8002224:	01ffffff 	.word	0x01ffffff
 8002228:	fffffedf 	.word	0xfffffedf

0800222c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800223c:	e04b      	b.n	80022d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	3301      	adds	r3, #1
 8002242:	d048      	beq.n	80022d6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7fe fc94 	bl	8000b70 <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e04b      	b.n	80022f6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2204      	movs	r2, #4
 8002266:	4013      	ands	r3, r2
 8002268:	d035      	beq.n	80022d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2208      	movs	r2, #8
 8002272:	4013      	ands	r3, r2
 8002274:	2b08      	cmp	r3, #8
 8002276:	d111      	bne.n	800229c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2208      	movs	r2, #8
 800227e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f83c 	bl	8002300 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2284      	movs	r2, #132	; 0x84
 800228c:	2108      	movs	r1, #8
 800228e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2278      	movs	r2, #120	; 0x78
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e02c      	b.n	80022f6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	401a      	ands	r2, r3
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d112      	bne.n	80022d6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f81f 	bl	8002300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2284      	movs	r2, #132	; 0x84
 80022c6:	2120      	movs	r1, #32
 80022c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2278      	movs	r2, #120	; 0x78
 80022ce:	2100      	movs	r1, #0
 80022d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e00f      	b.n	80022f6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	4013      	ands	r3, r2
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	425a      	negs	r2, r3
 80022e6:	4153      	adcs	r3, r2
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	001a      	movs	r2, r3
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d0a4      	beq.n	800223e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b004      	add	sp, #16
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08e      	sub	sp, #56	; 0x38
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002308:	f3ef 8310 	mrs	r3, PRIMASK
 800230c:	617b      	str	r3, [r7, #20]
  return(result);
 800230e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
 8002312:	2301      	movs	r3, #1
 8002314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f383 8810 	msr	PRIMASK, r3
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4926      	ldr	r1, [pc, #152]	; (80023c4 <UART_EndRxTransfer+0xc4>)
 800232a:	400a      	ands	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f383 8810 	msr	PRIMASK, r3
}
 8002338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233a:	f3ef 8310 	mrs	r3, PRIMASK
 800233e:	623b      	str	r3, [r7, #32]
  return(result);
 8002340:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
 8002344:	2301      	movs	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	f383 8810 	msr	PRIMASK, r3
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2101      	movs	r1, #1
 800235c:	438a      	bics	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	f383 8810 	msr	PRIMASK, r3
}
 800236a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	2b01      	cmp	r3, #1
 8002372:	d118      	bne.n	80023a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002374:	f3ef 8310 	mrs	r3, PRIMASK
 8002378:	60bb      	str	r3, [r7, #8]
  return(result);
 800237a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800237e:	2301      	movs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f383 8810 	msr	PRIMASK, r3
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2110      	movs	r1, #16
 8002396:	438a      	bics	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f383 8810 	msr	PRIMASK, r3
}
 80023a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	2120      	movs	r1, #32
 80023ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b00e      	add	sp, #56	; 0x38
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	fffffedf 	.word	0xfffffedf

080023c8 <memset>:
 80023c8:	0003      	movs	r3, r0
 80023ca:	1882      	adds	r2, r0, r2
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d100      	bne.n	80023d2 <memset+0xa>
 80023d0:	4770      	bx	lr
 80023d2:	7019      	strb	r1, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	e7f9      	b.n	80023cc <memset+0x4>

080023d8 <__libc_init_array>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	2600      	movs	r6, #0
 80023dc:	4c0c      	ldr	r4, [pc, #48]	; (8002410 <__libc_init_array+0x38>)
 80023de:	4d0d      	ldr	r5, [pc, #52]	; (8002414 <__libc_init_array+0x3c>)
 80023e0:	1b64      	subs	r4, r4, r5
 80023e2:	10a4      	asrs	r4, r4, #2
 80023e4:	42a6      	cmp	r6, r4
 80023e6:	d109      	bne.n	80023fc <__libc_init_array+0x24>
 80023e8:	2600      	movs	r6, #0
 80023ea:	f000 f819 	bl	8002420 <_init>
 80023ee:	4c0a      	ldr	r4, [pc, #40]	; (8002418 <__libc_init_array+0x40>)
 80023f0:	4d0a      	ldr	r5, [pc, #40]	; (800241c <__libc_init_array+0x44>)
 80023f2:	1b64      	subs	r4, r4, r5
 80023f4:	10a4      	asrs	r4, r4, #2
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d105      	bne.n	8002406 <__libc_init_array+0x2e>
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	00b3      	lsls	r3, r6, #2
 80023fe:	58eb      	ldr	r3, [r5, r3]
 8002400:	4798      	blx	r3
 8002402:	3601      	adds	r6, #1
 8002404:	e7ee      	b.n	80023e4 <__libc_init_array+0xc>
 8002406:	00b3      	lsls	r3, r6, #2
 8002408:	58eb      	ldr	r3, [r5, r3]
 800240a:	4798      	blx	r3
 800240c:	3601      	adds	r6, #1
 800240e:	e7f2      	b.n	80023f6 <__libc_init_array+0x1e>
 8002410:	08002470 	.word	0x08002470
 8002414:	08002470 	.word	0x08002470
 8002418:	08002474 	.word	0x08002474
 800241c:	08002470 	.word	0x08002470

08002420 <_init>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr

0800242c <_fini>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr
